/**
 * OptHub REST API
 * OptHub Public REST API.
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: dev@opthub.ai
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "opthub_api_client/model/MatchTrialResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



MatchTrialResponse::MatchTrialResponse()
{
    m_TrialNo = 0;
    m_TrialNoIsSet = false;
    m_StatusIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
}

MatchTrialResponse::~MatchTrialResponse()
{
}

void MatchTrialResponse::validate()
{
    // TODO: implement validation
}

web::json::value MatchTrialResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TrialNoIsSet)
    {
        val[utility::conversions::to_string_t(U("trialNo"))] = ModelBase::toJson(m_TrialNo);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }

    return val;
}

bool MatchTrialResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("trialNo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("trialNo")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTrialNo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrialNo);
            setTrialNo(refVal_setTrialNo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MatchTrialStatus> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    return ok;
}

void MatchTrialResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TrialNoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("trialNo")), m_TrialNo));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
}

bool MatchTrialResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("trialNo"))))
    {
        int32_t refVal_setTrialNo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("trialNo"))), refVal_setTrialNo );
        setTrialNo(refVal_setTrialNo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<MatchTrialStatus> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    return ok;
}

int32_t MatchTrialResponse::getTrialNo() const
{
    return m_TrialNo;
}

void MatchTrialResponse::setTrialNo(int32_t value)
{
    m_TrialNo = value;
    m_TrialNoIsSet = true;
}

bool MatchTrialResponse::trialNoIsSet() const
{
    return m_TrialNoIsSet;
}

void MatchTrialResponse::unsetTrialNo()
{
    m_TrialNoIsSet = false;
}
std::shared_ptr<MatchTrialStatus> MatchTrialResponse::getStatus() const
{
    return m_Status;
}

void MatchTrialResponse::setStatus(const std::shared_ptr<MatchTrialStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool MatchTrialResponse::statusIsSet() const
{
    return m_StatusIsSet;
}

void MatchTrialResponse::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::datetime MatchTrialResponse::getCreatedAt() const
{
    return m_CreatedAt;
}

void MatchTrialResponse::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool MatchTrialResponse::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void MatchTrialResponse::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
}
}
}
}


