/**
 * OptHub REST API
 * OptHub Public REST API.
 *
 * The version of the OpenAPI document: 0.1.1
 * Contact: dev@opthub.ai
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "opthub_api_client/model/GetSolutionError.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

GetSolutionError::eGetSolutionError toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("InvalidMatchId")))
        return GetSolutionError::eGetSolutionError::GetSolutionError_INVALIDMATCHID;
    if (val == utility::conversions::to_string_t(U("InvalidParticipantId")))
        return GetSolutionError::eGetSolutionError::GetSolutionError_INVALIDPARTICIPANTID;
    if (val == utility::conversions::to_string_t(U("TrialNotFound")))
        return GetSolutionError::eGetSolutionError::GetSolutionError_TRIALNOTFOUND;
    return {};
}

EnumUnderlyingType fromEnum(GetSolutionError::eGetSolutionError e)
{
    switch (e)
    {
    case GetSolutionError::eGetSolutionError::GetSolutionError_INVALIDMATCHID:
        return U("InvalidMatchId");
    case GetSolutionError::eGetSolutionError::GetSolutionError_INVALIDPARTICIPANTID:
        return U("InvalidParticipantId");
    case GetSolutionError::eGetSolutionError::GetSolutionError_TRIALNOTFOUND:
        return U("TrialNotFound");
    default:
        break;
    }
    return {};
}
}

GetSolutionError::GetSolutionError()
{
}

GetSolutionError::~GetSolutionError()
{
}

void GetSolutionError::validate()
{
    // TODO: implement validation
}

web::json::value GetSolutionError::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool GetSolutionError::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void GetSolutionError::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool GetSolutionError::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

GetSolutionError::eGetSolutionError GetSolutionError::getValue() const
{
   return m_value;
}

void GetSolutionError::setValue(GetSolutionError::eGetSolutionError const value)
{
   m_value = value;
}


}
}
}
}


