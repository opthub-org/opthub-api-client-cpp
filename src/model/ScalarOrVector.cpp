/**
 * OptHub REST API
 * OptHub Public REST API.
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: dev@opthub.ai
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "opthub_api_client/model/ScalarOrVector.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ScalarOrVector::ScalarOrVector()
{
    m_VectorIsSet = false;
    m_Scalar = 0.0;
    m_ScalarIsSet = false;
}

ScalarOrVector::~ScalarOrVector()
{
}

void ScalarOrVector::validate()
{
    // TODO: implement validation
}

web::json::value ScalarOrVector::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_VectorIsSet)
    {
        val[utility::conversions::to_string_t(U("vector"))] = ModelBase::toJson(m_Vector);
    }
    if(m_ScalarIsSet)
    {
        val[utility::conversions::to_string_t(U("scalar"))] = ModelBase::toJson(m_Scalar);
    }

    return val;
}

bool ScalarOrVector::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("vector"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vector")));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_setVector;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVector);
            setVector(refVal_setVector);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("scalar"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scalar")));
        if(!fieldValue.is_null())
        {
            double refVal_setScalar;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScalar);
            setScalar(refVal_setScalar);
        }
    }
    return ok;
}

void ScalarOrVector::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_VectorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vector")), m_Vector));
    }
    if(m_ScalarIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scalar")), m_Scalar));
    }
}

bool ScalarOrVector::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("vector"))))
    {
        std::vector<double> refVal_setVector;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vector"))), refVal_setVector );
        setVector(refVal_setVector);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("scalar"))))
    {
        double refVal_setScalar;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scalar"))), refVal_setScalar );
        setScalar(refVal_setScalar);
    }
    return ok;
}

std::vector<double>& ScalarOrVector::getVector()
{
    return m_Vector;
}

void ScalarOrVector::setVector(std::vector<double> value)
{
    m_Vector = value;
    m_VectorIsSet = true;
}

bool ScalarOrVector::vectorIsSet() const
{
    return m_VectorIsSet;
}

void ScalarOrVector::unsetVector()
{
    m_VectorIsSet = false;
}
double ScalarOrVector::getScalar() const
{
    return m_Scalar;
}

void ScalarOrVector::setScalar(double value)
{
    m_Scalar = value;
    m_ScalarIsSet = true;
}

bool ScalarOrVector::scalarIsSet() const
{
    return m_ScalarIsSet;
}

void ScalarOrVector::unsetScalar()
{
    m_ScalarIsSet = false;
}
}
}
}
}


