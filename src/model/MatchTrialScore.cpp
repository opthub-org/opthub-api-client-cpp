/**
 * OptHub REST API
 * OptHub Public REST API.
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: dev@opthub.ai
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "opthub_api_client/model/MatchTrialScore.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



MatchTrialScore::MatchTrialScore()
{
    m_StatusIsSet = false;
    m_Error = utility::conversions::to_string_t("");
    m_ErrorIsSet = false;
    m_Value = 0.0;
    m_ValueIsSet = false;
    m_StartedAt = utility::datetime();
    m_StartedAtIsSet = false;
    m_FinishedAt = utility::datetime();
    m_FinishedAtIsSet = false;
}

MatchTrialScore::~MatchTrialScore()
{
}

void MatchTrialScore::validate()
{
    // TODO: implement validation
}

web::json::value MatchTrialScore::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_ErrorIsSet)
    {
        val[utility::conversions::to_string_t(U("error"))] = ModelBase::toJson(m_Error);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }
    if(m_StartedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("startedAt"))] = ModelBase::toJson(m_StartedAt);
    }
    if(m_FinishedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("finishedAt"))] = ModelBase::toJson(m_FinishedAt);
    }

    return val;
}

bool MatchTrialScore::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RunnerStatus> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("error")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setError);
            setError(refVal_setError);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            double refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("startedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("startedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setStartedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartedAt);
            setStartedAt(refVal_setStartedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("finishedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("finishedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setFinishedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFinishedAt);
            setFinishedAt(refVal_setFinishedAt);
        }
    }
    return ok;
}

void MatchTrialScore::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_ErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("error")), m_Error));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
    if(m_StartedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("startedAt")), m_StartedAt));
    }
    if(m_FinishedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("finishedAt")), m_FinishedAt));
    }
}

bool MatchTrialScore::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<RunnerStatus> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("error"))))
    {
        utility::string_t refVal_setError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("error"))), refVal_setError );
        setError(refVal_setError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        double refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("startedAt"))))
    {
        utility::datetime refVal_setStartedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("startedAt"))), refVal_setStartedAt );
        setStartedAt(refVal_setStartedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("finishedAt"))))
    {
        utility::datetime refVal_setFinishedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("finishedAt"))), refVal_setFinishedAt );
        setFinishedAt(refVal_setFinishedAt);
    }
    return ok;
}

std::shared_ptr<RunnerStatus> MatchTrialScore::getStatus() const
{
    return m_Status;
}

void MatchTrialScore::setStatus(const std::shared_ptr<RunnerStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool MatchTrialScore::statusIsSet() const
{
    return m_StatusIsSet;
}

void MatchTrialScore::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t MatchTrialScore::getError() const
{
    return m_Error;
}

void MatchTrialScore::setError(const utility::string_t& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}

bool MatchTrialScore::errorIsSet() const
{
    return m_ErrorIsSet;
}

void MatchTrialScore::unsetError()
{
    m_ErrorIsSet = false;
}
double MatchTrialScore::getValue() const
{
    return m_Value;
}

void MatchTrialScore::setValue(double value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool MatchTrialScore::valueIsSet() const
{
    return m_ValueIsSet;
}

void MatchTrialScore::unsetValue()
{
    m_ValueIsSet = false;
}
utility::datetime MatchTrialScore::getStartedAt() const
{
    return m_StartedAt;
}

void MatchTrialScore::setStartedAt(const utility::datetime& value)
{
    m_StartedAt = value;
    m_StartedAtIsSet = true;
}

bool MatchTrialScore::startedAtIsSet() const
{
    return m_StartedAtIsSet;
}

void MatchTrialScore::unsetStartedAt()
{
    m_StartedAtIsSet = false;
}
utility::datetime MatchTrialScore::getFinishedAt() const
{
    return m_FinishedAt;
}

void MatchTrialScore::setFinishedAt(const utility::datetime& value)
{
    m_FinishedAt = value;
    m_FinishedAtIsSet = true;
}

bool MatchTrialScore::finishedAtIsSet() const
{
    return m_FinishedAtIsSet;
}

void MatchTrialScore::unsetFinishedAt()
{
    m_FinishedAtIsSet = false;
}
}
}
}
}


