/**
 * OptHub REST API
 * OptHub Public REST API.
 *
 * The version of the OpenAPI document: 0.1.1
 * Contact: dev@opthub.ai
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "opthub_api_client/model/CreateSolutionResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CreateSolutionResponse::CreateSolutionResponse()
{
    m_ParticipantId = utility::conversions::to_string_t("");
    m_ParticipantIdIsSet = false;
    m_TrialNo = 0;
    m_TrialNoIsSet = false;
}

CreateSolutionResponse::~CreateSolutionResponse()
{
}

void CreateSolutionResponse::validate()
{
    // TODO: implement validation
}

web::json::value CreateSolutionResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ParticipantIdIsSet)
    {
        val[utility::conversions::to_string_t(U("participantId"))] = ModelBase::toJson(m_ParticipantId);
    }
    if(m_TrialNoIsSet)
    {
        val[utility::conversions::to_string_t(U("trialNo"))] = ModelBase::toJson(m_TrialNo);
    }

    return val;
}

bool CreateSolutionResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("participantId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("participantId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setParticipantId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParticipantId);
            setParticipantId(refVal_setParticipantId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("trialNo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("trialNo")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTrialNo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrialNo);
            setTrialNo(refVal_setTrialNo);
        }
    }
    return ok;
}

void CreateSolutionResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ParticipantIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("participantId")), m_ParticipantId));
    }
    if(m_TrialNoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("trialNo")), m_TrialNo));
    }
}

bool CreateSolutionResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("participantId"))))
    {
        utility::string_t refVal_setParticipantId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("participantId"))), refVal_setParticipantId );
        setParticipantId(refVal_setParticipantId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("trialNo"))))
    {
        int32_t refVal_setTrialNo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("trialNo"))), refVal_setTrialNo );
        setTrialNo(refVal_setTrialNo);
    }
    return ok;
}

utility::string_t CreateSolutionResponse::getParticipantId() const
{
    return m_ParticipantId;
}

void CreateSolutionResponse::setParticipantId(const utility::string_t& value)
{
    m_ParticipantId = value;
    m_ParticipantIdIsSet = true;
}

bool CreateSolutionResponse::participantIdIsSet() const
{
    return m_ParticipantIdIsSet;
}

void CreateSolutionResponse::unsetParticipantId()
{
    m_ParticipantIdIsSet = false;
}
int32_t CreateSolutionResponse::getTrialNo() const
{
    return m_TrialNo;
}

void CreateSolutionResponse::setTrialNo(int32_t value)
{
    m_TrialNo = value;
    m_TrialNoIsSet = true;
}

bool CreateSolutionResponse::trialNoIsSet() const
{
    return m_TrialNoIsSet;
}

void CreateSolutionResponse::unsetTrialNo()
{
    m_TrialNoIsSet = false;
}
}
}
}
}


